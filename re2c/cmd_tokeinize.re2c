#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <assert.h>
#include <string.h>
#include <memory.h>

#define YYDEBUG(s, c) printf("function: %s state: %d char: %c\n", __FUNCTION__, s, c)

// re2 >= 1.2
// re2c -8 re2c/cmd_tokeinize.re2c --input-encoding utf8 --tags -o src/cmd_tokeinize.c

/*!max:re2c*/

static void cmd_tokeinize_push(uint8_t *start, uint8_t *end, char *tokens[], int token_count )
{
    *end = '\0';
    tokens[token_count] = (char *)start;
}

void cmd_tokeinize(unsigned char *str, char *tokens[], int *tokens_len )
{
assert(str);
assert(tokens);
assert(tokens_len);

int tokens_count = 0;
uint8_t *YYMARKER = NULL;
uint8_t *YYLIMIT = (str + strlen((char*)str));
uint8_t *t1, *t2;
/*!stags:re2c format = 'uint8_t *@@;'; */
loop:
/*!re2c
re2c:define:YYCTYPE = uint8_t;
re2c:define:YYCURSOR = str;
re2c:yyfill:enable = 0;
re2c:eof = 0;

$ { goto end; }

whitespace = [ \n\t\v\f]+;
token = [^ \n\t\v\f]+;

@t1 token @t2 whitespace? { cmd_tokeinize_push(t1, t2, tokens, tokens_count++ ); goto loop; }
*/
end:
    *tokens_len = tokens_count;
    return;
}
